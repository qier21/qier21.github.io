<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>qier的自留地</title>
  
  <subtitle>摸鱼ing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://qier21.github.io/"/>
  <updated>2020-04-07T15:54:10.243Z</updated>
  <id>https://qier21.github.io/</id>
  
  <author>
    <name>Qierr</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux内核学习笔记(一)--内存寻址</title>
    <link href="https://qier21.github.io/2020/04/05/38131/"/>
    <id>https://qier21.github.io/2020/04/05/38131/</id>
    <published>2020-04-05T06:54:41.000Z</published>
    <updated>2020-04-07T15:54:10.243Z</updated>
    
    <content type="html"><![CDATA[<p>​        在去年就打算维护一个个人博客用于记录自己遇到的坑跟一些学习心得了，一方面是将一些容易遗忘的信息碎片沉淀到网络的海洋之中，另一方面也是想通过这里监督自己学习吧。没想到一直鸽了到现在。说实话，虽然主要是因为懒癌迟迟未付诸行动，但是我也常常困惑，又有什么东西是我所能沉淀于这茫茫大海的呢？鲸在海中死亡后最终沉到到海底成为大海的养分，而在网络中，众多个人博客站点所承载到信息碎片也给这片大海中所需要的人带来了养分吧，虽然现在我的知识体系还很贫弱，但也希望积累起来，能够为所需要的人带来帮助。</p><p>​        这系列的文章主要是在读<em>《深入了解Linux内核》</em>这本书时做的一些笔记，每看完一部分会尝试整理到这里，不可避免会有一些谬误跟理解不到位的地方，如果你有什么看法或建议，欢迎给我留言。</p><h2 id="内存地址"><a href="#内存地址" class="headerlink" title="内存地址"></a>内存地址</h2><p>首先需要了解3个基本概念：</p><ul><li><p><strong>逻辑地址</strong></p></li><li><p><strong>线性地址</strong></p></li><li><p><strong>物理地址</strong></p><p>他们之间的关系可以简要由下图描述，这个过程由<strong><em>MMU</em></strong>完成：</p><p><img src="/2020/04/05/38131/logic2phy.png" alt="逻辑地址转换"></p></li></ul><p>该流程在此不多加赘述</p><h3 id="逻辑地址"><a href="#逻辑地址" class="headerlink" title="逻辑地址"></a>逻辑地址</h3><p>一个逻辑地址由两部分组成： <strong>段标识符</strong>（16位，又称<strong>段选择符</strong>） + <strong>段内偏移</strong>（32位）</p><p><img src="/2020/04/05/38131/%E6%AE%B5%E9%80%89%E6%8B%A9%E7%AC%A6.png" alt="段选择符"></p><p>为了快速找到段选择符，处理器提供段寄存器（cs,ss,ds,es,fs和gs）用于存放段选择符</p><p>3个专用寄存器：</p><table><thead><tr><th>寄存器</th><th>功能</th></tr></thead><tbody><tr><td>ss</td><td>栈段寄存器</td></tr><tr><td>cs</td><td>代码段寄存器</td></tr><tr><td>ds</td><td>数据段寄存器</td></tr></tbody></table><p><em>\</em>cs寄存器中还有一个两位的字段用于标识CPU当前特权级（内核态、用户态）*</p><h3 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h3><p>每个段由一个<strong>段描述符</strong>（8字节）表示，它描述了段的特征，存放于<strong>GDT</strong>或<strong>LDT</strong>中</p><p><em>（*GDT在主存中大小和地址存放于gdtr控制寄存器 LDT地址及大小则存放于ldtr控制寄存器）</em></p><p><em>段描述符各字段含义：</em></p><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td>Base</td><td>包含段的首字节的线性地址</td></tr><tr><td>G</td><td>粒度标志，置0为以字节为单位，否则以4k为单位</td></tr><tr><td>Limit</td><td>段中最后一个内存单元偏移，决定段的长度</td></tr><tr><td>S</td><td>系统标志：置0表示为一个系统段</td></tr><tr><td>Type</td><td>段的类型特征及存取权限</td></tr><tr><td>DPL</td><td>描述符特权级。表示访问该段要求的CPU最小特权级</td></tr><tr><td>P</td><td>Segment-Present：置0时表示该段不在主存，Linux中常为1</td></tr><tr><td>D或B</td><td>D或B的标志，取决于是代码段还是数据段</td></tr><tr><td>AVL</td><td>被Linux忽略</td></tr></tbody></table><h4 id="快速访问段描述符"><a href="#快速访问段描述符" class="headerlink" title="快速访问段描述符"></a>快速访问段描述符</h4><p><img src="/2020/04/05/38131/%E5%BF%AB%E9%80%9F%E8%AE%BF%E9%97%AE%E6%AE%B5%E6%8F%8F%E8%BF%B0%E7%AC%A6.png" alt="快速访问段描述符"></p><p>为了加速逻辑地址到线性地址的转换，80x86处理器提供一种非编程的寄存器供6个可编程段寄存器使用。每个非编程寄存器含<strong>8字节</strong>段描述符。每当一个段选择符被装入段寄存器，相应段描述法就由内存装入到对应的非编程寄存器。相当于做了一层缓存，减少了对GDT或LDT的访问。当段寄存器内容改变时，才有必要再次访问GDT或LDT。</p><p><em>段选择符字段</em></p><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td>index</td><td>指定放在GDT或LDT中相应段描述符的入口</td></tr><tr><td>TI</td><td>TI=0:段描述符在GDT中，TI=1:段描述符在LDT中</td></tr><tr><td>RPL</td><td>请求者特权级：相应段选择符装入cs时指示出当前cpu特权级，也可以用于访问数据段时削弱处理器特权级</td></tr></tbody></table><p><em>段描述符在GDT或LDT中相对位置由段选择符高13位乘8得出（一个段描述符8字节长）</em></p><p><em>\</em>GDT第一项总为0（用于确保无效化空段选择符逻辑地址，以引起一个处理器异常）。GDT中段描述符最大数目为8191，即 <img src="http://latex.codecogs.com/gif.download?%5Csmall%20%242%5E%7B13%7D-1%24" alt="2^{13}-1">*</p><h4 id="分段单元"><a href="#分段单元" class="headerlink" title="分段单元"></a>分段单元</h4><p>=============================博主摸鱼去啦，缓慢施工中===================================</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​        在去年就打算维护一个个人博客用于记录自己遇到的坑跟一些学习心得了，一方面是将一些容易遗忘的信息碎片沉淀到网络的海洋之中，另一方面也是想通过这里监督自己学习吧。没想到一直鸽了到现在。说实话，虽然主要是因为懒癌迟迟未付诸行动，但是我也常常困惑，又有什么东西是我
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://qier21.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="OS" scheme="https://qier21.github.io/tags/OS/"/>
    
      <category term="Linux" scheme="https://qier21.github.io/tags/Linux/"/>
    
      <category term="Linux内核" scheme="https://qier21.github.io/tags/Linux%E5%86%85%E6%A0%B8/"/>
    
      <category term="内存管理" scheme="https://qier21.github.io/tags/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
</feed>
